// Generated by gencpp from file simple_robot_gazebo/encoders.msg
// DO NOT EDIT!


#ifndef SIMPLE_ROBOT_GAZEBO_MESSAGE_ENCODERS_H
#define SIMPLE_ROBOT_GAZEBO_MESSAGE_ENCODERS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace simple_robot_gazebo
{
template <class ContainerAllocator>
struct encoders_
{
  typedef encoders_<ContainerAllocator> Type;

  encoders_()
    : encoderTicks()
    , timeStamp(0)  {
    }
  encoders_(const ContainerAllocator& _alloc)
    : encoderTicks(_alloc)
    , timeStamp(0)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _encoderTicks_type;
  _encoderTicks_type encoderTicks;

   typedef uint32_t _timeStamp_type;
  _timeStamp_type timeStamp;





  typedef boost::shared_ptr< ::simple_robot_gazebo::encoders_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::simple_robot_gazebo::encoders_<ContainerAllocator> const> ConstPtr;

}; // struct encoders_

typedef ::simple_robot_gazebo::encoders_<std::allocator<void> > encoders;

typedef boost::shared_ptr< ::simple_robot_gazebo::encoders > encodersPtr;
typedef boost::shared_ptr< ::simple_robot_gazebo::encoders const> encodersConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::simple_robot_gazebo::encoders_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::simple_robot_gazebo::encoders_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::simple_robot_gazebo::encoders_<ContainerAllocator1> & lhs, const ::simple_robot_gazebo::encoders_<ContainerAllocator2> & rhs)
{
  return lhs.encoderTicks == rhs.encoderTicks &&
    lhs.timeStamp == rhs.timeStamp;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::simple_robot_gazebo::encoders_<ContainerAllocator1> & lhs, const ::simple_robot_gazebo::encoders_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace simple_robot_gazebo

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::simple_robot_gazebo::encoders_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::simple_robot_gazebo::encoders_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::simple_robot_gazebo::encoders_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::simple_robot_gazebo::encoders_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::simple_robot_gazebo::encoders_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::simple_robot_gazebo::encoders_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::simple_robot_gazebo::encoders_<ContainerAllocator> >
{
  static const char* value()
  {
    return "07aba7a5adda19d5b02a03ead81505ac";
  }

  static const char* value(const ::simple_robot_gazebo::encoders_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x07aba7a5adda19d5ULL;
  static const uint64_t static_value2 = 0xb02a03ead81505acULL;
};

template<class ContainerAllocator>
struct DataType< ::simple_robot_gazebo::encoders_<ContainerAllocator> >
{
  static const char* value()
  {
    return "simple_robot_gazebo/encoders";
  }

  static const char* value(const ::simple_robot_gazebo::encoders_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::simple_robot_gazebo::encoders_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] encoderTicks\n"
"uint32 timeStamp\n"
;
  }

  static const char* value(const ::simple_robot_gazebo::encoders_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::simple_robot_gazebo::encoders_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.encoderTicks);
      stream.next(m.timeStamp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct encoders_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::simple_robot_gazebo::encoders_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::simple_robot_gazebo::encoders_<ContainerAllocator>& v)
  {
    s << indent << "encoderTicks[]" << std::endl;
    for (size_t i = 0; i < v.encoderTicks.size(); ++i)
    {
      s << indent << "  encoderTicks[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.encoderTicks[i]);
    }
    s << indent << "timeStamp: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.timeStamp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SIMPLE_ROBOT_GAZEBO_MESSAGE_ENCODERS_H
